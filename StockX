# For this project, I downloaded shoe sales data from StockX's data contest from 2019.
# Then I created a table to insert the sales data into.
# Finally, I performed analytics on the data using mySQL.

# Create and Import data into a new table using Import Wizard
CREATE TABLE 'StockX'.'shoe_sales' (
date text,
brand text,
sneaker name text,
sales price text,
retail price text,
release date text,
shoe size double,
buyer region text,
)

# Cleaning data, column names, and datatypes

# Alter column names
ALTER TABLE `StockX`.`shoe_sales` 
CHANGE COLUMN `Order Date` `Order_Date` TEXT NULL DEFAULT NULL ,
CHANGE COLUMN `Sneaker Name` `Sneaker_Name` TEXT NULL DEFAULT NULL ,
CHANGE COLUMN `Sale Price` `Sale_Price` TEXT NULL DEFAULT NULL ,
CHANGE COLUMN `Retail Price` `Retail_Price` TEXT NULL DEFAULT NULL ,
CHANGE COLUMN `Release Date` `Release_Date` TEXT NULL DEFAULT NULL ,
CHANGE COLUMN `Shoe Size` `Shoe_Size` DOUBLE NULL DEFAULT NULL ,
CHANGE COLUMN `Buyer Region` `Buyer_Region` TEXT NULL DEFAULT NULL ;

# Add an ID column, set as primary key that auto-increments, and place as the first column
ALTER TABLE `StockX`.`shoe_sales` 
ADD COLUMN `Sale_ID` INT NOT NULL AUTO_INCREMENT FIRST,
ADD PRIMARY KEY (`Sale_ID`);

# Clean column Order_date for date format and set to DATE datatype
UPDATE shoe_sales
SET Order_date = STR_TO_DATE(Order_date, '%m/%d/%Y');

ALTER TABLE shoe_sales
MODIFY COLUMN Order_Date date

# Clean column Release_date for date format and set to DATE datatype
UPDATE shoe_sales
SET release_date = STR_TO_DATE(release_date, '%m/%d/%Y');

ALTER TABLE shoe_sales
MODIFY COLUMN Release_Date date;

# Clean column Sale_Price to remove "$" and "," and set to INT datatype
UPDATE shoe_sales
SET sale_price = TRIM(leading '$' FROM sale_price);

UPDATE shoe_sales
SET sale_price = REPLACE(sale_price, ',', '');

ALTER TABLE shoe_sales
MODIFY COLUMN Sale_Price int;

# Clean column Retail_Price to remove "$" and "," and set to INT datatype
UPDATE shoe_sales
SET retail_price = TRIM(leading '$' FROM retail_price);

UPDATE shoe_sales
SET retail_price = REPLACE(retail_price, ',', '');

ALTER TABLE shoe_sales
MODIFY COLUMN Retail_Price int;

# Change remaining columns from TEXT datatype to VARCHAR datatype
ALTER TABLE shoe_sales
MODIFY COLUMN Brand VARCHAR(255);

ALTER TABLE shoe_sales
MODIFY COLUMN Sneaker_Name VARCHAR(255);

ALTER TABLE shoe_sales
MODIFY COLUMN Buyer_Region VARCHAR(255);

# Now, I am able to analyze a clean data set and solve problems using queries

# Which brand had more StockX sales and which had the higher total profit on StockX in this time frame
SELECT brand,
       COUNT(Sale_ID) AS Total_Shoes,
       CONCAT('$',SUM(Sale_Price) - SUM(retail_price)) AS Total_Price
FROM shoe_sales
GROUP BY 1
ORDER BY 1, 2 DESC

# What was each shoe's highest single sale on StockX (including order date, sneaker name, and the retail price)
WITH maximum AS
(SELECT Sneaker_Name,   
		MAX(sale_price) AS highest_sale
FROM shoe_sales 
GROUP BY 1)

SELECT ss.order_date,
       mm.sneaker_name,
       mm.highest_sale,
       ss.retail_price
FROM shoe_sales ss
JOIN maximum mm USING(sneaker_name)
WHERE mm.highest_sale = ss.sale_price
ORDER BY 3 DESC

# Which shoes had sales before the official release date and what was the average profit percentage made on StockX before the release
SELECT sneaker_name,
       release_date,
       COUNT(sale_id) AS shoes_sold,
       CONCAT('$', SUM(sale_price - retail_price)) AS total_profit,
       CONCAT(ROUND(AVG(((sale_price - retail_price) / retail_price) * 100), 0), '%') AS avg_sale_percentage_above_retail
FROM shoe_sales
WHERE Release_Date > order_date
GROUP BY 1,2
ORDER BY ROUND(AVG(((sale_price - retail_price) / retail_price) * 100), 1) DESC

# What is the average sale price the 1st week following a shoe's release date compared to the average sale price over the 1st year after the release date
SELECT ss.sneaker_name,
		ss.release_date,
        weeks.average_1_week_sales,
		CONCAT('$', ROUND(AVG(ss.sale_price), 2)) AS average_1_year_sales
FROM shoe_sales ss
JOIN (SELECT sneaker_name, release_date, CONCAT('$', ROUND(AVG(sale_price), 2)) AS average_1_week_sales
        FROM shoe_sales
        WHERE order_date BETWEEN release_date AND DATE_ADD(release_date, INTERVAL 1 week)
        GROUP BY 1,2
        ) AS weeks ON ss.sneaker_name = weeks.sneaker_name
WHERE ss.order_date BETWEEN ss.release_date AND DATE_ADD(ss.release_date, INTERVAL 1 year)
GROUP BY 1,2,3
ORDER BY 1 
