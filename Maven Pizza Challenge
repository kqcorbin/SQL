# For this project, I downloaded Pizza Place Sales data from Maven Analytics as a part of the Maven Pizza Challenge.
# This project will use SQL to analyze a years worth of sales data from a fictitious Pizza Place.
# Then I created tables to insert Pizza Place data into.
# There are 4 tables being added: orders, order_details, pizza, pizza_types
# Finally, I performed analytics on the data using mySQL

# Create the orders table
CREATE TABLE 'Pizza Pizza'.'orders' (
'order_id' int,
'date' text,
'time' text
)

# Imported the orders.csv file into the table

# Create the order_details table
CREATE TABLE 'Pizza Pizza'.'order_details' (
'order_details_id' int,
'order_id' int,
'pizza_id' text,
'quanity' int
)

# Imported the order_details.csv file into the table

# Create the pizzas tables
CREATE TABLE 'Pizza Pizza'.'pizzas' (
'pizza_id' text,
'pizza_type_id' text,
'size' text,
'price' double
)

# Imported the pizzas.csv file into the table

# Create the pizza_types tables
CREATE TABLE 'Pizza Pizza'.'pizza_types' (
'pizza_type_id' text,
'name' text,
'category' text,
'ingredients' text
)

# Imported the pizza_types.csv file into the table

# Next, I cleaned and altered some of the data using the following SQL queries to change columns datatypes:

# Change column 'date' to the DATE datatype
ALTER TABLE `Pizza Pizza`.`orders` 
CHANGE COLUMN `date` `date` DATE NULL DEFAULT NULL ;

# Change column 'time' to the TIME datatype
ALTER TABLE 'Pizza Pizza'.'orders'
CHANGE COLUMN 'time' 'time' TIME NULL DEFAULT NULL ;

# Next, I answered a few questions using SQL queries 

# What days and times seem to be the busiest (most orders)

WITH days_and_hours AS
(SELECT *,
	EXTRACT(HOUR from time) AS hours,
        WEEKDAY(date) AS week_day
 FROM orders)

SELECT CASE WHEN week_day = 0 THEN 'Monday'
	    WHEN week_day = 1 THEN 'Tuesday'
	    WHEN week_day = 2 THEN 'Wednesday'
	    WHEN week_day = 3 THEN 'Thursday'
	    WHEN week_day = 4 THEN 'Friday'
	    WHEN week_day = 5 THEN 'Saturday'
	    WHEN week_day = 6 THEN 'Sunday' ELSE NULL END AS 'Weekday',
        COUNT(*) AS 'Total # of Orders',
        ROUND((COUNT(order_id) / COUNT(DISTINCT date)), 0) AS 'Average Orders per Day'
FROM days_and_hours
GROUP BY 1
ORDER BY 2 DESC;

SELECT DATE_FORMAT(time, '%h %p') AS Hours,
        COUNT(*) AS 'Total Orders',
        ROUND((COUNT(order_id) / COUNT(DISTINCT date)), 0) AS 'Average Orders'
FROM orders
GROUP BY 1
ORDER BY 2 DESC;

# How many pizzas are being made during Peak Times

SELECT 	DATE_FORMAT(time, '%h %p') AS Hours,
        SUM(tail.quantity) AS '# of Pizzas Ordered',
        ROUND((SUM(tail.quantity)/COUNT(DISTINCT o.date)),0) AS 'Average Pizzas Made'
FROM orders o
JOIN order_details tail ON o.order_id = tail.order_id
WHERE DATE_FORMAT(time, '%h %p') IN ('12 PM', '01 PM', '05 PM', '06 PM')
GROUP BY 1
ORDER BY 2 DESC

# What are our best and worst selling pizzas

SELECT  pt.name,
	SUM(quantity) AS pizzas_sold
FROM order_details od
JOIN pizzas p ON od.pizza_id = p.pizza_id
	JOIN pizza_types pt ON p.pizza_type_id = pt.pizza_type_id
GROUP BY 1
ORDER BY 2 DESC

# What's our average order value?
WITH total AS
(SELECT od.order_id,		
	od.order_details_id,
	price * quantity AS totals
FROM order_details od  
JOIN pizzas p ON od.pizza_id = p.pizza_id
GROUP BY 1,2,3)

SELECT ROUND(SUM(totals) / COUNT(DISTINCT order_id), 2) AS avg_order_total
FROM total

# How well are we utilizing our seating capacity? (we have 15 tables and 60 seats)

WITH table_count AS 
(SELECT order_id,   
	    SUM(quantity) AS pizzas,   
        CASE WHEN SUM(quantity) < 5 THEN 1      
             WHEN SUM(quantity) >= 5 AND SUM(quantity) < 9 THEN 2              
             WHEN SUM(quantity) >= 9 AND SUM(quantity) < 13 THEN 3              
             WHEN SUM(quantity) >= 13 AND SUM(quantity) < 17 THEN 4              
             WHEN SUM(quantity) >= 17 AND SUM(quantity) < 21 THEN 5              
             WHEN SUM(quantity) >= 21 AND SUM(quantity) < 25 THEN 6              
			 WHEN SUM(quantity) >= 25 AND SUM(quantity) < 29 THEN 7 ELSE 8 END AS Tables 
        FROM order_details 
        GROUP BY 1)  

SELECT CONCAT(date,' at ', DATE_FORMAT(time, '%h %p')) AS Hours,     
	   SUM(tc.tables) AS 'Tables Needed',
       SUM(pizzas) AS 'Pizzas Ordered'
FROM orders o 
JOIN table_count tc ON o.order_id = tc.order_id 
GROUP BY 1 
ORDER BY 2 desc
